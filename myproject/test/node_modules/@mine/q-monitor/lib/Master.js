var os = require('os');
var graphite = require('graphite');
var axon = require('axon');
var sock = axon.socket('pull');
var metrics = {};
var timeCache = {};
var cycle = 10; // 秒
var hostname = (function() {
    var hostname = os.hostname();
    return hostname.replace('.qunar.com', '').replace(/\./g, '_');
})();


function Master (port) {
    let self = this;
    this.port = port;
    sock.connect(this.port);

    sock.on('message', function(msg){
        console.log("master received msg:", JSON.stringify(msg));

        if (msg.cmd === 'addMonitor') {
            switch (msg.type) {
                case 'count':
                    self.addCount(msg.metry);
                    break;
                case 'time':
                    self.addTime(msg.metry, msg.time);
                    break;
            }
        }
    });

    this.send();
}

Master.prototype.initMonitor = function(host, port, prefix, loop) {
    this.carbonHost = host;
    this.carbonPort = port;
    this.barbonPrefix = prefix + '.';
    this.cycle = cycle * (loop || 1);

    this.send();
};

Master.prototype.addCount = function(metry) {
    metry = this.barbonPrefix + metry + '_Count' + '_' + hostname;

    if (!metrics[metry]) {
        metrics[metry] = 1;
    } else {
        metrics[metry] ++;
    }
};

Master.prototype.addTime = function(metry, time) {
    metry = this.barbonPrefix + metry + '_Time' + '_' + hostname;

    if (!timeCache[metry]) {
        timeCache[metry] = {
            count: 1,
            time: time
        };
    } else {
        timeCache[metry].count ++;
        timeCache[metry].time += time;
    }

    metrics[metry] = timeCache[metry].time / timeCache[metry].count;
};

Master.prototype.sendToWatcher = function() {
    let self = this;
/*
     var url = ['plaintext://', this.carbonHost, ':', this.carbonPort, '/'].join('');
     var client = graphite.createClient(url);

     console.log('send metrics', metrics);
     client.write(metrics, function(err) {
         if (!err) {
             client.end();
             for (var metry in metrics) {
                 if (metrics.hasOwnProperty(metry)) {
                     metrics[metry] = 0;
                 }
             }

             for (var metry in timeCache) {
                 if (timeCache.hasOwnProperty(metry)) {
                     timeCache[metry] = null;
                 }
             }

         } else {
             console.error(err);
         }
     });*/

    console.log("发送汇总数据:", metrics, timeCache, new Date());
    self.send();
}

Master.prototype.send = function() {
    var self = this;
    setTimeout(function() {
        self.sendToWatcher();
    }, cycle * 1000);
}


module.exports = Master;

